import { NextResponse } from 'next/server';import { getServerSupabase } from '@/lib/supabase';export async function GET(req:Request){const {searchParams}=new URL(req.url);const q=(searchParams.get('q')||'').toLowerCase();const tier=searchParams.get('tier')||'C';const supa=getServerSupabase();let query=supa.from('products').select('id, sku, name, unit, stock_qty, active, product_prices(price, price_tier_code)').eq('active',true).order('name');if(q)query=query.or(`name.ilike.%${q}%,sku.ilike.%${q}%`);const {data,error}=await query; if(error) return NextResponse.json({error:error.message},{status:500});const result=(data||[]).map((p:any)=>{const pr=(p.product_prices||[]).find((r:any)=>r.price_tier_code===tier);return {id:p.id,sku:p.sku,name:p.name,unit:p.unit,stock:p.stock_qty,price:pr?pr.price:null};});return NextResponse.json(result);}export async function POST(req:Request){const supa=getServerSupabase();const body=await req.json();const {id,sku,name,unit='τεμ.',stock_qty=0,priceA,priceB,priceC}=body||{};if(!id||!sku||!name) return NextResponse.json({error:'Missing id/sku/name'},{status:400});const {error}=await supa.from('products').insert({id,sku,name,unit,stock_qty,active:true});if(error) return NextResponse.json({error:error.message},{status:500});const prices=[] as any[];if(priceA!=null)prices.push({product_id:id,price_tier_code:'A',price:priceA});if(priceB!=null)prices.push({product_id:id,price_tier_code:'B',price:priceB});if(priceC!=null)prices.push({product_id:id,price_tier_code:'C',price:priceC});if(prices.length){const {error:e2}=await supa.from('product_prices').upsert(prices,{onConflict:'product_id,price_tier_code'});if(e2) return NextResponse.json({error:e2.message},{status:500});}return NextResponse.json({ok:true});}export async function PUT(req:Request){const supa=getServerSupabase();const body=await req.json();const {id,sku,name,unit='τεμ.',stock_qty=0,priceA,priceB,priceC}=body||{};if(!id) return NextResponse.json({error:'Missing id'},{status:400});const {error}=await supa.from('products').update({sku,name,unit,stock_qty}).eq('id',id);if(error) return NextResponse.json({error:error.message},{status:500});const prices=[{product_id:id,price_tier_code:'A',price:priceA},{product_id:id,price_tier_code:'B',price:priceB},{product_id:id,price_tier_code:'C',price:priceC}].filter((p:any)=>p.price!=null);if(prices.length){const {error:e2}=await supa.from('product_prices').upsert(prices,{onConflict:'product_id,price_tier_code'});if(e2) return NextResponse.json({error:e2.message},{status:500});}return NextResponse.json({ok:true});}